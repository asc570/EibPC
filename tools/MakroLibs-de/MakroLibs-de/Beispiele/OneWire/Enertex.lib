//----------------------------------------------------------------------
//  Makros für den Enertex EiBPC
//
//  Verschiedenes und Nützliches
//
//  Version              : v1.011
//
//  License              : Verwendung nur für die Nutzung mit dem 
//                         Enertex EibPC gestattet 
//
//  (C) Copyright        : Enertex Bayern GmbH. All rights reserved.
//
//  Author               : Enertex Bayern GmbH
// 
//  Dat.Rev.             : $Date: 2011/02/23 08:42:36 $
//  Version              : $Revision: 1.1 $
//----------------------------------------------------------------------

:begin Taupunkt(SensorLuftfeuchte,SensorTemperatur)
:info $Dieses Makro berechent den Taupunkt, er wird in der Variable TaupunktTemp(Datentyp f32) gespeichert$ $Adresse Luftfeuchtesensor$ $Adresse Temperatursensor$
:shortinfo $Taupunktberechnung$
TaupunktTemp=0f32
r=0f32
T=0f32
a=7.5f32
b= 237.3f32
SDDT = 0f32
DDrT = 0f32
v = 0f32
	
if change(SensorLuftfeuchte) or change(SensorTemperatur) then \\
	r=convert((convert(SensorLuftfeuchte, 0u32) + 1u32)*100u32 / 256u32,0f32) /100f32;\\
	T=convert(SensorTemperatur, a);\\
	SDDT=6.1078f32 * pow(10f32,(a*T)/(b+T));\\
	DDrT= r*SDDT;\\
	v=log(10f32,(DDrT/6.1078f32));\\
	TaupunktTemp=b*v/(a-v) \\
	endif 

:end


// Online 
:begin Online()
:info $Berechnet die Zeit seit letztem Start des Awendungsprogramms. Es wird ein c14-String AnzeigeOnline definiert, der zur Ausgabe der Daten auf ein KNX Anzeigeelement dient$ 
// Variablendefintionen
:shortinfo $Zeigt an wie lange der EibPC online ist$
TageOnline=0u16
StundenOnline=0
MinutenOnline=0
if mtime(59,00) then 							\\
	if StundenOnline<23 then 						\\
  		StundenOnline=StundenOnline+1 					\\
	     else                          						\\
		StundenOnline=0;			                \\
		TageOnline=TageOnline+1u16 					\\
	 endif 						\\
     endif 

if stime(59) then 							\\
	 if MinutenOnline<59 then        						\\
		MinutenOnline=MinutenOnline+1 					\\
	     else 				      		\\
		MinutenOnline=0 			    	        \\
	     endif						\\
	endif 
// Minuten
AnzeigeM0=$00$c14
if MinutenOnline<10 and change(MinutenOnline) then AnzeigeM0=$0$c14+convert(MinutenOnline,$xx$c14) endif
if MinutenOnline>9 and change(MinutenOnline) then AnzeigeM0=convert(MinutenOnline,$xx$c14) endif 
// Stunden
AnzeigeS0=$00$c14
if StundenOnline<10 and change(StundenOnline) then AnzeigeS0=$0$c14+convert(StundenOnline,$xx$c14) endif
if StundenOnline>9 and change(StundenOnline) then AnzeigeS0=convert(StundenOnline,$xx$c14) endif 
// Tage
AnzeigeT0=$000$c14
if TageOnline<10u16 and change(TageOnline) then AnzeigeT0=$00$c14+convert(TageOnline,$xx$c14) endif
if TageOnline>9u16 and TageOnline<100u16 and change(TageOnline) then AnzeigeT0=$0$c14+convert(TageOnline,$xx$c14) endif 
if TageOnline>99u16 and change(TageOnline) then AnzeigeT0=convert(TageOnline,$xx$c14) endif 
// Ausgabe Ein String im Format dd.hh:mm
AnzeigeOnline=AnzeigeT0+$.$c14+AnzeigeS0+$:$c14+AnzeigeM0
:end 


:begin Doppelklick(Name,TasteGA,TasteWert,Klick1GA,Klick1Wert,Klick2GA,Klick2Wert)
:info $Mit diesem Funktionsblock können Sie einen Doppelklick auf eine Taste realisieren: Wenn Sie innerhalb von 0.8 Sekunden zweimal auf den Taster drücken, wird eine andere Aktion ausgelöst, als wie wenn Sie einmal drücken. Beide Aktionen können Sie mit diesem FunktionsblockMakro steuern$ \\
      $Name des Taster (zwecks Eindeutigkeit)$\\
      $Grupenadresse, auf welcher der Taster Werte sendet$\\
      $Der vom Taster gesendete Wert (z.B. EIN oder AUS) $\\
      $Gruppenadresse für Telegramm bei einfachen Tastendruck$\\
      $Wert für Telegramm bei einfachen Tastendruck (z.B. EIN oder AUS oder 23%$\\
      $Gruppenadresse für Telegramm bei doppelten Tastendruck$\\
      $Wert für Telegramm bei doppelten Tastendruck (z.B. EIN oder AUS oder 23%$
:shortinfo $Eine Taste mit Doppelklick$ 

Name^DoppelKlick=0
if event(TasteGA) and (TasteGA==TasteWert) then Name^DoppelKlick=Name^DoppelKlick+1 endif
if after(Name^DoppelKlick==1, 800u64) and Name^DoppelKlick==1 then write(Klick1GA,Klick1Wert) endif 
if after(Name^DoppelKlick==1, 800u64) and Name^DoppelKlick==2 then write(Klick2GA,Klick2Wert) endif 
if after(Name^DoppelKlick==1, 1000u64) then Name^DoppelKlick=0 endif 

:end


:begin DoppelklickUM(Name,TasteGA,TasteWert,Klick1GA,Klick2GA)
:info $Mit diesem Funktionsblock können Sie einen Doppelklick auf eine Taste \\
realisieren: Wenn Sie innerhalb von 0.8 Sekunden zweimal auf den Taster \\
drücken, wird eine andere Aktion ausgelöst, als wie wenn Sie einmal drücken. \\
Beide Aktionen können Sie mit diesem FunktionsblockMakro steuern- Die \\
jeweiligen GAs werden umgeschaltet (getoggelt)$ \\
      $Name des Taster (zwecks Eindeutigkeit)$\\
      $Grupenadresse, auf welcher der Taster Werte sendet$\\
      $Der vom Taster gesendete Wert (z.B. EIN oder AUS) $\\
      $Gruppenadresse für Telegramm bei einfachen Tastendruck$\\
      $Gruppenadresse für Telegramm bei doppelten Tastendruck$
:shortinfo $Eine Taste mit Doppelklick$ 
Name^DoppelKlick=0
Name^StatusKlick=AUS
Name^StatusDoppelKlick=AUS
if event(TasteGA) and (TasteGA==TasteWert) then Name^DoppelKlick=Name^DoppelKlick+1 endif
if after(Name^DoppelKlick==1, 800u64) and Name^DoppelKlick==1 and Name^StatusKlick==AUS then write(Klick1GA,EIN) endif 
if after(Name^DoppelKlick==1, 800u64) and Name^DoppelKlick==1 and Name^StatusKlick==EIN then write(Klick1GA,AUS) endif 
if after(Name^DoppelKlick==1, 800u64) and Name^DoppelKlick==2 and Name^StatusDoppelKlick==AUS then write(Klick2GA,EIN) endif 
if after(Name^DoppelKlick==1, 800u64) and Name^DoppelKlick==2 and Name^StatusDoppelKlick==EIN then write(Klick2GA,AUS) endif 
if after(Name^DoppelKlick==1, 1000u64) then Name^DoppelKlick=0 endif 
if after(Name^DoppelKlick==1 and Name^StatusKlick==AUS, 1000u64) then Name^StatusKlick=EIN endif
if after(Name^DoppelKlick==1 and Name^StatusKlick==EIN, 1000u64) then Name^StatusKlick=AUS endif
if after(Name^DoppelKlick==1 and Name^StatusDoppelKlick==AUS, 1000u64) then Name^StatusDoppelKlick=EIN endif
if after(Name^DoppelKlick==1 and Name^StatusDoppelKlick==EIN, 1000u64) then Name^StatusDoppelKlick=AUS endif
:end 


:begin LangerTastendruck(Name,TasteGA,Zeit,Kommando1,Kommando2)
:info $Mit diesem Funktionsblock können Sie einen kurzen und langen Tastendruck auswerten: Wenn Sie länger als Zeit (in ms) auf den Taster drücken, wird Kommando2 ausgeführt, sonst Kommando1. Kommandos können beliebige durch Strichpunkt getrennte Anweisungen sein (kein Strichpunkt am Ende).  \\
    $ \\
      $Name des Taster (zwecks Eindeutigkeit)$\\
      $Grupenadresse, auf welcher der Taster Werte ein EIN beim Drücken und AUS beim Loslassen sendet$\\
      $Zeit in ms (z.B. 200) , ab der ein langer Tastdruck erkannt wird. Erst nach Ablauf dieser Zeit werden nach Tasterbetätigung Kommandos ausgeführt.$\\
      $Kommando für den kurzen Tastendruck, z.B. write('1/2/3'b01,EIN)$\\
      $Kommando für den langen Tastendruck, z.B. write('1/2/3'b01,AUS)$
:shortinfo $Mit diesem Funktionsblock können Sie einen kurzen und langen Tastendruck auswerten$ 
Name_Command1 = EIN
Name_Lang = EIN
if TasteGA then Name_Command1=AUS;Name_Lang = AUS endif
if after(TasteGA,Zeit^u64) then Name_Lang = EIN endif
if (!TasteGA) and !Name_Lang then {
   Kommando1;
   Name_Command1=EIN
} endif
if (!TasteGA) and Name_Lang and !Name_Command1 then {
   Kommando2
} endif

:end

:begin LangerTastendruckGA(Name,TasteGA,Zeit,KurzGA,KurzWert,LangGA,LangWert)
:info $Mit diesem Funktionsblock können Sie einen kurzen und langen Tastendruck auswerten: Wenn Sie länger als Zeit (in ms) auf den Taster drücken, wird KurzGA geschalten, sonst LangGA.$ \\
      $Name des Taster (zwecks Eindeutigkeit)$\\
      $Grupenadresse, auf welcher der Taster Werte ein EIN beim Drücken und AUS beim Loslassen sendet$\\
      $Zeit in ms (z.B. 200) , ab der ein langer Tastdruck erkannt wird. Erst nach Ablauf dieser Zeit werden nach Tasterbetätigung Kommandos ausgeführt.$\\
      $GA für den kurzen Tastendruck$\\
      $Wert für den kurzen Tastendruck, muss zum Datentyp der GA passen$\\
      $GA für den langen Tastendruck$\\
      $Wert für den kurzen Tastendruck, muss zum Datentyp der GA passen$
:shortinfo $Mit diesem Funktionsblock können Sie einen kurzen und langen Tastendruck auswerten$ 
Name_Command1 = EIN
Name_Lang = EIN
if TasteGA then Name_Command1=AUS;Name_Lang = AUS endif
if after(TasteGA,Zeit^u64) then Name_Lang = EIN endif
if (!TasteGA) and !Name_Lang then {
   write(KurzGA,KurzWert);
   Name_Command1=EIN
} endif
if (!TasteGA) and Name_Lang and !Name_Command1 then {
   write(LangGA,LangWert)
} endif


:end



:begin PIHeizRegler(Name,Freigabe,SollWert,IstWert,KFaktor,IFaktor)
:info $Mit diesem Funktionsblock können Sie einen PI-Regler für eine Heizungsregelung realisieren. Der Ausgangswert wird in Prozent berechnet und in eine Variable NamePIAktor gespeichert, wobei hier Name für den Namen des 1. Arguments steht.$\\
      $Name des Reglers (zwecks Eindeutigkeit)$\\
      $Gruppenadresse oder Variable als Freigabeobjekt für den Regler$\\
      $Gruppenadresse oder Variable als Sollwertvorgabe (z.B. 22.3 für 22.3 Grad) $\\
      $Gruppenadresse oder Variable des Istwerts (Fließkomma, 16Bit)$\\
      $KFaktor: Faktor 1.0 entspricht 1% ReglerAusgang bei 1 Grad Abweichung. Demnach entspricht der Faktor 100.0 bei 1 Grad Abweichung 100%.$\\
      $IFaktor: Faktor 1.0 entspricht 1% ReglerAusgang bei 1 Grad Abweichung über 1 Minute. Demnach entspricht der Faktor 1.0 bei 1 Grad Abweichung über 100 Minuten dem Ausgang 100%.$
:shortinfo $PIRegler für Heizung mit Prozentwert$

Name^KRegler=convert(SollWert,0f32)-convert(IstWert,0f32)
Name^IRegler=0.0f32
if change(Freigabe) then Name^IRegler=0.0f32 endif

// 100 Min => 100% Abweichung bei einem Grad Temp. Differenz
if cycle(1,0) then Name^IRegler=Name^IRegler+Name^KRegler; \\
                   Name^PIAusgang=convert(Name^KRegler*convert(KFaktor,0f32) +Name^IRegler*convert(IFaktor,0f32),0f32) endif
// In Prozentwert umbauen
Name^PIAktor=0
Name^PIAusgang=0.0f32
// Reglerbegrenzungen
if Name^IRegler>100000.0f32 then Name^IRegler=100000.0f32 endif
if Name^IRegler<-100000.0f32 then Name^IRegler=-10000.0f32 endif
if Name^PIAusgang>255.0f32 then Name^PIAusgang=255.0f32 endif
if Name^PIAusgang<0.0f32 then Name^PIAusgang=0.0f32 endif
if Name^PIAusgang>=0.0f32 and cycle(2,0)  then Name^PIAktor=min(100%,convert(Name^PIAusgang,0)) endif
if Name^PIAusgang<0.0f32 then Name^PIAktor=0 endif
:end

:begin PIHeizReglerGA(Name,Freigabe,SollWert,IstWert,KFaktor,IFaktor,GA,Min)
:info $Mit diesem Funktionsblock können Sie einen PI-Regler für eine Heizungsregelung realisieren. Der Ausgangswert wird in Prozent berechnet und in eine Variable NamePIAktor gespeichert, wobei hier Name für den Namen des 1. Arguments steht. Der Reglerausgang wird direkt mit zyklischer Ausgabe auf eine Gruppenadresse gesendet.$\\
      $Name des Reglers (zwecks Eindeutigkeit)$\\
      $Gruppenadresse oder Variable als Freigabeobjekt für den Regler$\\
      $Gruppenadresse oder Variable als Sollwertvorgabe (z.B. 22.3 für 22.3 Grad) $\\
      $Gruppenadresse oder Variable des Istwerts (Fließkomma, 16Bit)$\\
      $KFaktor: Faktor 1.0 entspricht 1% ReglerAusgang bei 1 Grad Abweichung. Demnach entspricht der Faktor 100.0 bei 1 Grad Abweichung 100%.$\\
      $IFaktor: Faktor 1.0 entspricht 1% ReglerAusgang bei 1 Grad Abweichung über 1 Minute. Demnach entspricht der Faktor 1.0 bei 1 Grad Abweichung über 100 Minuten dem Ausgang 100%.$\\
      $Gruppenadresse (Prozent) auf die zyklisch der Wert ausgegeben werden soll.$
      $Min: Zykluszeit in Minuten (max. 255) der Ausgabe auf die Gruppenadresse.$
:shortinfo $PIRegler für Heizung mit Prozentwert und zyklischer Ausgabe auf Gruppenadresse$

Name^KRegler=convert(SollWert,0f32)-convert(IstWert,0f32)
Name^IRegler=0.0f32
if change(Freigabe) then Name^IRegler=0.0f32 endif

// 100 Min => 100% Abweichung bei einem Grad Temp. Differenz
if cycle(1,0) then Name^IRegler=Name^IRegler+Name^KRegler; \\
                   Name^PIAusgang=convert(Name^KRegler*convert(KFaktor,0f32) +Name^IRegler*convert(IFaktor,0f32),0f32) endif
// In Prozentwert umbauen
Name^PIAktor=0
Name^PIAusgang=0.0f32
// Reglerbegrenzungen
if Name^IRegler>100000.0f32 then Name^IRegler=100000.0f32 endif
if Name^IRegler<-100000.0f32 then Name^IRegler=-10000.0f32 endif
if Name^PIAusgang>255.0f32 then Name^PIAusgang=255.0f32 endif
if Name^PIAusgang<0.0f32 then Name^PIAusgang=0.0f32 endif
if Name^PIAusgang>=0.0f32 and cycle(2,0)  then Name^PIAktor=min(100%,convert(Name^PIAusgang,0)) endif
if Name^PIAusgang<0.0f32 then Name^PIAktor=0 endif

if after(cycle(Min,0),convert(random(60000u32),0u64)) and Freigabe then write(GA,Name^PIAktor) endif
if change(Freigabe) and !Freigabe then write(GA,0%) endif

:end

:begin kWh_Einfach(Name,GA)
:info $Ein Integrator für einen Zähler für  Aktoren mit Stromerkennung (z.B. ABB SA/S x.16.5S). Der mA Wert wird in eine Variable kWh_Name gespeichert, welche vom Typ f32 ist.\\
    Annahme: Der Aktor gibt den Wert in mA über die GA aus (Leseanforderung muss möglich sein). Alle 15 Min schickt der EibPC eine Leseanforderung an diese Adresse, um den \\
    Wert aktuell zu halten. Das Makro geht von einer Spannung 230V und einem Cosinus-PHI von 1 aus.$\\
    $Name des Zählers$\\
    $Gruppenadresse des Aktors (gemessener Stromwert in mA)$
:shortinfo $Einfacher Stromzähler aus mA Aktorsignal, Spannung 230V und Cosinus-PHI = 1$
// Sekundenzähler
Name^t=0f32
if cycle(0,1) then Name^t=Name^t+1f32 endif
// Integrationsintervall
Name^t0=0f32
// Steuervariable
Name^Int=AUS
// Stromwert
Name^Strom=0u16
// Zähler
kWh_Name=0f32
// Der Integrator
// kwH=Strom*Delta_Zeit
// mit Delta_Zeit=t-t0
// Dimension kWh: I(A)/1000*230V* Delta_Zeit s/3600 *1/1000= I*Delta_Zeit*6.3888888888888888888e-8
if event(GA) then Name^Int=EIN;kWh_Name=kWh_Name+convert(Name^Strom,0f32)*(Name^t-Name^t0)*6.38888888888888888888e-8f32 endif
// Speichern der Werte
if Name^Int then Name^t0=Name^t;Name^Int=AUS;Name^Strom=convert(GA, 0u16) endif
// Alle 15 min in jedem Fall den Zähler auslesen
if cycle(15,0) then read(GA) endif
:end

:begin kWh(Name,GA,Un,Cos)
:info $Ein Integrator für einen Zähler für  Aktoren mit Stromerkennung (z.B. ABB SA/S x.16.5S). Der mA Wert wird in eine Variable kWh_Name gespeichert, welche vom Typ f32 ist.\\
    Annahme: Der Aktor gibt den Wert in mA über die GA aus (Leseanforderung muss möglich sein). Alle 15 Min schickt der EibPC eine Leseanforderung an diese Adresse, um den \\
    Wert aktuell zu halten. Die Spannung und der Cosinus-PHI muss angegeben werden.$\\
    $Name des Zählers$\\
    $Gruppenadresse des Aktors (gemessener Stromwert in mA)$\\
    $Nennspannung als Zahl (in V, z.B. 110, 60)$\\
    $Cosinus Phi als Zahl (z.B. 0.8, 0.9)$
:shortinfo $Einfacher Stromzähler aus mA Aktorsignal$
// Sekundenzähler
Name^t=0f32
if cycle(0,1) then Name^t=Name^t+1f32 endif
// Integrationsintervall
Name^t0=0f32
// Steuervariable
Name^Int=AUS
// Stromwert
Name^Strom=0u16
// Zähler
kWh_Name=0f32
Name^Faktor=1e-6f32/3600.0f32*Un^f32*Cos^f32
// Der Integrator
if event(GA) then Name^Int=EIN;kWh_Name=kWh_Name+convert(Name^Strom,0f32)*(Name^t-Name^t0)*Name^Faktor endif
// Speichern der Werte
if Name^Int then Name^t0=Name^t;Name^Int=AUS;Name^Strom=convert(GA, 0u16) endif
// Alle 15 min in jedem Fall den Zähler auslesen
if cycle(15,0) then read(GA) endif
:end


:begin ForLoop(Name,Start,CountMax,Aktion)
:info $Eine Aktion (ein oder mehrere Funktionsaufrufe, ausführbarer Code) in einer Schleife Ausführen. Als Schleifenzähler wird Name^Counter genutzt. Dieser Zähler wird um 1 erhöht und läuft bis zur Grenze CountMax. Danach wird die Startvariable wieder auf AUS gesetzt.$\\
      $Name der Schleife$\\
      $Startvariable (EIN oder AUS). Bei Wechsel auf EIN fängt die Schleife an zu arbeiten$\\
      $Maximale Zahl der Durchläufe als Zahl zwischen 0 und 4294967295$\\
      $Ein oder mehrere Anweisungen (entspricht Code des Anwendungsprogramms). Zwischen den Anweisungen (nicht am Ende) durch Strichpunkt getrennt.$
:shortinfo $For-Schleife$
Name^Counter=1u32
if (Start) then  Name^Counter=0u32 endif
if after(change(Name^Counter),1u64) and Name^Counter<CountMax^u32 then Aktion; Name^Counter=Name^Counter+1u32 else Start = AUS endif 
:end 

:begin WhileLoop(Name,Start,Bedingung,Aktion)
:info $Eine Aktion (ein oder mehrere Funktionsaufrufe, ausführbarer Code) in einer While-Schleife Ausführen. Danach wird die Startvariable wieder auf AUS gesetzt.$\\
      $Name der Schleife$\\
      $Startvariable (EIN oder AUS). Bei Wechsel auf EIN fängt die Schleife an zu arbeiten$\\
      $Solange diese Bedingung wahr ist, wird die Aktion ausgeführt.(Maximal aber 4294967295-mal)$\\
      $Ein oder mehrere Anweisungen (entspricht Code des Anwendungsprogramms). Zwischen den Anweisungen (nicht am Ende) durch Strichpunkt getrennt.$
:shortinfo $While-Schleife$
Name^Counter=0u32
if (Start) and (Bedingung) then  Name^Counter=1u32 endif
if after(change(Name^Counter) and !(Name^Counter == 0u32) ,1u64) then if (Bedingung) then Name^Counter=Name^Counter+1u32; Aktion else Start = AUS endif endif 
:end 

:begin WOL(Trigger,MAC1,MAC2,MAC3,MAC4,MAC5,MAC6)
:info $Ein Wake-On-LAN Telegramm an das Gerät mit der Macadresse schicken. Die Argumente werden als Hexcode (ohne führendes "0x") angegeben.\\
 Sie müssen Option NP auf Ihrem EibPC installiert haben$.\\
      $Trigger$ \\
      $1. Byte  als Hexcode ohne führendes "0x" $\\
      $2. Byte  als Hexcode ohne führendes "0x" $\\
      $3. Byte  als Hexcode ohne führendes "0x" $\\
      $4. Byte  als Hexcode ohne führendes "0x" $\\
      $5. Byte  als Hexcode ohne führendes "0x" $\\
      $6. Byte  als Hexcode ohne führendes "0x" $
:shortinfo $Wake on Lan$
if (Trigger) then  sendudp(10000u16, 255.255.255.255, 255,255,255,255,255,255,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08,\\
0x^MAC1^u08,0x^MAC2^u08,0x^MAC3^u08,0x^MAC4^u08,0x^MAC5^u08,0x^MAC6^u08) endif 
:end 


:begin PercentToFloat(PercentGA, Name)
:info $Konvertiert einen Prozentwert(Datentyp u08) in eine f32 Variable, deren Namen sie wählen können, z.B. 50% wird zu 0.5f32$\\
	$Gruppenadresse von welcher der Prozent Wert gelesen werden soll$\\
	$Name der Variable$
:shortinfo $Konvertiert einen Prozentwert in eine Fließkommazahl$
if systemstart() then read(PercentGA) endif
Name = convert((convert(PercentGA, 0u32) + 1u32)*100u32 / 256u32,0f32) /100f32
if change(PercentGA) then Name = convert((convert(PercentGA, 0u32) + 1u32)*100u32 / 256u32,0f32) endif
:end

:begin UhrenSynchronisation(UhrGA)
:info $Täglich um 3:00 Uhr wird die entsprechende Uhr mit der Uhrzeit des EibPCs synchronisiert. Dazu muss es möglich sein auf die Gruppenadresse zu schreiben.$\\
$Gruppenadresse der Uhr$
:shortinfo $Täglich um 3:00 Uhr eine Uhr synchronisieren$
if htime(03,00,00) then write(UhrGA, settime()) endif
:end


//----------------------------------------------------------------------
// Author               : Andreas Loebnitz
//----------------------------------------------------------------------

:begin Ventil(Name,Gzeit,Eingangswert,Schaltventil)
:info $Ein Eingangssignal eines RTR wird in ein Schaltsignal für einen Ventilaktor umgewandelt, wobei die Zykluszeit frei in Minuten gewählt werden kann.$\\
      $Name z.B. WohnzimmerVentil$ \\
      $Gewünschte Zykluszeit in Minuten$ \\
      $GA des Ausgangswert des RTR in % (Wert 0-255)$\\
      $Gruppenadresse, auf welcher der Steuerbefehl gesendet wird $
:shortinfo $Pulsweitenmodulierte Ventilansteuerung durch RTR$
 st^Name=0b01
if (systemstart()) then st^Name=1b01; \\
                        read (Eingangswert) endif
if after (st^Name,3000u64) and (Eingangswert>0u08) then write (Schaltventil,EIN) endif
if cycle (convert(Gzeit,2u08),0)and (Eingangswert>0u08) then write (Schaltventil,EIN) endif
if after(Schaltventil,(convert(Eingangswert,1u64)*convert(Gzeit,1u64 )*235u64)) then write (Schaltventil,AUS) endif
:end



//----------------------------------------------------------------------
// Abfrage von GoogleWetter
// 
//----------------------------------------------------------------------

:begin GoogleWetter(Name,PLZ,Land,Startabfrage)
:info $Abfrage bei Google-Weather. Das Makro generiert die Werte Google_Name_Temperatur, Google_Name_Luftfeuchte, Google_Name_VorhersageMax, Google_Name_VorhersageMin als 16-BitFließkommazahlen. Diese können im Programm genutzt werden. Google_Name_Wolken und Google_Name_VorhersageWolken werden mit den Vorhersagen wie "sonnig" als Strings c1400 definiert. Über PLZ und Land (in englischer Sprache, z.B. Germany) gibt man den gewünschten Standort der Abfrage an. Über Startabfrage kann der Prozess gestartet werden, z.B. mit htime(5,00,00) täglich um 5 Uhr morgens.$\\
      $Der Name, z.B. "Daheim" oder "Erlachstrasse"$\\
      $Die Postleitzahl$\\
      $Das Land in englischer Sprache, z.B. Germany$\\
      $Initieren der Abfrage, z.B. htime(5,00,00)$
:shortinfo $Wetterabfrage bei Google$

// Google Weather: Es kommen 2 TCP Pakete an.
Google_Name_xmlText=$$
Google_Name_xmlText_Data1=$$
Google_Name_xmlText_Data2=$$
Google_Name_xmlCount=0

Google_Name_Port=0u16
Google_Name_IP=0u32
Google_Name_GooglePort = 80u16
Google_Name_GoogleIP = resolve($www.google.com$)
// TCP Verbindung aufmachen
if (Startabfrage == EIN) then {
	connecttcp(Google_Name_GooglePort,Google_Name_GoogleIP)
}endif
// TCP Anfrage schicken
if (after(Startabfrage,1000u64) == EIN) then {
	sendtcp(Google_Name_GooglePort,Google_Name_GoogleIP,$GET /ig/api?weather=$+$^PLZ^$+$+$+$^Land^$+$&hl=de HTTP/1.1$,0x0D,0x0A,0x0D,0x0A)
}endif

// Es kommen 2 Pakete an
if event(readtcp(Google_Name_Port,Google_Name_IP,Google_Name_xmlText)) and Google_Name_IP == Google_Name_GoogleIP then {
   if (Google_Name_xmlCount==0) then Google_Name_xmlText_Data1=Google_Name_xmlText endif;
   if (Google_Name_xmlCount==1) then Google_Name_xmlText_Data2=Google_Name_xmlText endif;
   Google_Name_xmlCount=Google_Name_xmlCount+1
}endif
// TCP Verbindung wieder ordentlich schließen
if after(Startabfrage,10000u64) then {
   closetcp(Google_Name_Port,Google_Name_IP)
} endif


// Parsen der xml Daten
Google_Name_Temperatur=0.0
Google_Name_Luftfeuchte=0.0
Google_Name_VorhersageMax=0.0
Google_Name_VorhersageMin=0.0
Google_Name_Wolken=$$
Google_Name_VorhersageWolken=$$
Google_Name_PosStart=0u16
Google_Name_PosEnd=0u16
// Und nun parsen
if Google_Name_xmlCount==2 then { 
    /* Die eigentlichen Daten passen in einen einizigen String, daher Ausschneiden des Headers */;
    Google_Name_PosStart=find(Google_Name_xmlText_Data1,$<forecast_information>$,0u16)+size($<forecast_information>$);
    Google_Name_xmlText=split(Google_Name_xmlText_Data1,Google_Name_PosStart,END)+Google_Name_xmlText_Data2;
    /* Parsen nach Temperatur */;
    Google_Name_PosStart=find(Google_Name_xmlText,$<temp_c data="$,0u16)+size($<temp_c data="$);
    Google_Name_PosEnd=find(split(Google_Name_xmlText,Google_Name_PosStart,END),$"$,0u16)+Google_Name_PosStart;
    Google_Name_Temperatur=convert(split(Google_Name_xmlText,Google_Name_PosStart,Google_Name_PosEnd),0.0);
    /* Parsen nach Luftfeuchte */;
    Google_Name_PosStart=find(Google_Name_xmlText,$<humidity data="Feuchtigkeit:$,0u16)+size($<humidity data="Feuchtigkeit:$);
    Google_Name_PosEnd=find(split(Google_Name_xmlText,Google_Name_PosStart,END),$%$,0u16)+Google_Name_PosStart;
    Google_Name_Luftfeuchte=convert(split(Google_Name_xmlText,Google_Name_PosStart,Google_Name_PosEnd),0.0);
    /* Parsen nach Vorhersage Min*/;
    Google_Name_PosStart=find(Google_Name_xmlText,$<low data="$,0u16)+size($<low data="$);
    Google_Name_PosEnd=find(split(Google_Name_xmlText,Google_Name_PosStart,END),$"$,0u16)+Google_Name_PosStart;
    Google_Name_VorhersageMin=convert(split(Google_Name_xmlText,Google_Name_PosStart,Google_Name_PosEnd),0.0);
    /* Parsen nach Vorhersage Max*/;
    Google_Name_PosStart=find(Google_Name_xmlText,$<high data="$,0u16)+size($<high data="$);
    Google_Name_PosEnd=find(split(Google_Name_xmlText,Google_Name_PosStart,END),$"$,0u16)+Google_Name_PosStart;
    Google_Name_VorhersageMax=convert(split(Google_Name_xmlText,Google_Name_PosStart,Google_Name_PosEnd),0.0);
    /* Parsen nach Wolken*/;
    Google_Name_PosStart=find(Google_Name_xmlText,$<condition data="$,0u16)+size($<condition data="$);
    Google_Name_PosEnd=find(split(Google_Name_xmlText,Google_Name_PosStart,END),$"/>$,0u16)+Google_Name_PosStart-1u16;
    Google_Name_Wolken=split(Google_Name_xmlText,Google_Name_PosStart,Google_Name_PosEnd);
    /* Parsen nach Wolkenvorhersage für 1. Tag*/;
    Google_Name_PosStart=find(Google_Name_xmlText,$<condition data="$,1u16)+size($<condition data="$);
    Google_Name_PosEnd=find(split(Google_Name_xmlText,Google_Name_PosStart,END),$"/>$,0u16)+Google_Name_PosStart-1u16;
    Google_Name_VorhersageWolken=split(Google_Name_xmlText,Google_Name_PosStart,Google_Name_PosEnd);
    Google_Name_xmlCount=0
} endif
:end
